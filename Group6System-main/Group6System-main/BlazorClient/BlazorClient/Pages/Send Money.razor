@page "/Send_Money"

@using BlazorClient.Data.CustomerService
@using BlazorClient.Data.SendMoney
@using BlazorClient.Models
@using BlazorClient.Authentication
@inject AuthenticationStateProvider AuthStat
@inject ICustomerService Service
@inject ISendMoneyService TransactionService

<div class="card">
    <h4 class="card-header">Send Money</h4>
    <div class="card-body">
        <div class="form-group row">
            <label class="col-form-label">Account number:</label>
            <input type="number" placeholder="account number" @bind-value="AccountNumber"/>
        </div>
        <div class="form-group row">
            <label class="col-form-label">Account Holder's Name:</label>
            <input type="text" placeholder="name" @bind-value="AccountName"/>
        </div>
        <div class="form-group row">
            <label class="col-form-label">Amount:</label>
            <input type="number" placeholder="amount" @bind-value="Amount"/>
        </div>
        <div class="form-group row">
            <label class="col-form-label">Message:</label>
            <input type="text" placeholder="message" @bind-value="Message"/>
        </div>
        
        <input type="checkbox" checked=@Save>

        <div style="color:red">@ErrorMessage</div>
        <button disabled="@_loading" class="btn btn-light" @onclick="SendMoneyAsync">Submit
            @if (_loading) 
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
        </button>
    </div>
</div>

@code {
    private long AccountNumber;
    private double Amount;
    private String AccountName;
    private String Message;
    private bool _loading;
    private bool Save;
    private string ErrorMessage { get; set; }

    private async Task SendMoneyAsync()
    {
        try
        {
            _loading = true;
            User user = CustomAuthenticationStateProvider.storedUser;
            Account Sender = await Service.GetAccount(user.Username);
            //ToDo get the receiver from the customer's input
            Account Receiver = await Service.GetAccount(AccountName);

            Transaction transaction = new Transaction(Sender, Receiver, Amount, Message, DateTime.Now.ToString(), Save);
            String successMessage = await TransactionService.SendMoney(transaction);
            
            ErrorMessage = successMessage;
            _loading = false;
        }
        catch (Exception e)
        {
            _loading = false;
            ErrorMessage = e.Message;
        }
    }
    }

}