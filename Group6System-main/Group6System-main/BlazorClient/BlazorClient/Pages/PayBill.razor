@page "/PayBill"
@using BlazorClient.Models
@using BlazorClient.Data.CustomerService
@using BlazorClient.Authentication
@using BlazorClient.Data.SendMoney
@inject CustomAuthenticationStateProvider AuthStat
@inject ICustomerService Service
@inject ISendMoneyService TransactionService

<div class="card" xmlns="http://www.w3.org/1999/html">
    <h4 class="card-header">Pay Bill</h4>
    <div class="card-body">
        <div class="form-group row">
            <label class="col-form-label">Account number:</label>
            <input type="number" placeholder="account number" @bind-value="AccountNumber">
        </div>
        <div class="form-group row">
            <label class="col-form-label">Account Holder's Name:</label>
            <input type="text" placeholder="name" @bind-value="AccountName">
        </div>
        <div class="form-group row">
            <label class="col-form-label">Invoice Number:</label>
            <input type="number" placeholder="invoice number" @bind-value="InvoiceNumber"/>
        </div>
        <div class="form-group row">
            <label class="col-form-label">Amount:</label>
            <input type="number" placeholder="amount" @bind-value="Amount">
        </div>
        <div class="form-group row">
            <label class="col-form-label">Message:</label>
            <input type="text" placeholder="message" @bind-value="Message">
        </div>
        
        <input type="checkbox" checked=@Save>Save Transaction>

        <div style="color:red">@ErrorMessage</div>
        <button disabled="@_loading" class="btn btn-light">
            @if (_loading) 
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            <a href="" @onclick="PayBillAsync">Submit</a> 
        </button>
    </div>
</div>

@code {
    private long AccountNumber;
    private double Amount;
    private String AccountName;
    private long InvoiceNumber;
    private String Message;
    private bool _loading;
    private bool Save;
    private string ErrorMessage { get; set; }

    private async Task PayBillAsync()
    {
        _loading = true;
        User user = AuthStat._cachedUser;
        Models.Account Sender = await Service.GetAccount(user.Username, user.Password);
        Models.Account Receiver = new Models.Account(AccountNumber, AccountName);

        Transaction transaction = new Transaction(Sender, Receiver, Amount, Message, DateTime.Now, Save);
        
        //Send money
        try
        {
            String successMessage = await TransactionService.PayBillAsync(transaction);
            ErrorMessage = successMessage;
            _loading = false;
        }
        catch (Exception e)
        {
            _loading = false;
            ErrorMessage = e.Message;
        }
    }
}