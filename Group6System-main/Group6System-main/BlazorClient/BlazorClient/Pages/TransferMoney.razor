@page "/SendMoney"

@using BlazorClient.Data.CustomerService
@using BlazorClient.Models
@using BlazorClient.Authentication
@using BlazorClient.Data.Transactions
@inject AuthenticationStateProvider _authStat
@inject ICustomerService _service
@inject ITransactionService _transactionService

<AuthorizeView>
    <Authorized>
        <div class="card">
            <h4 class="card-header">Send Money</h4>
            <div class="card-body">
                <div class="form-group row">
                    <label class="col-form-label">Account number:</label>
                    <input type="number" placeholder="account number" @bind-value="_accountNumber"/>
                </div>
                <div class="form-group row">
                    <label class="col-form-label">Account Holder's Name:</label>
                    <input type="text" placeholder="name" @bind-value="_accountName"/>
                </div>
                <div class="form-group row">
                    <label class="col-form-label">Amount:</label>
                    <input type="number" placeholder="amount" @bind-value="_amount"/>
                </div>
                <div class="form-group row">
                    <label class="col-form-label">Message:</label>
                    <input type="text" placeholder="message" @bind-value="_message"/>
                </div>
        
                <input type="checkbox" checked=@_save>

                <div style="color:red">@ErrorMessage</div>
                <button disabled="@_loading" class="btn btn-light" @onclick="SendMoneyAsync">Submit
                    @if (_loading) 
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                </button>
            </div>
        </div>
    </Authorized>
</AuthorizeView>


@code {
    private long _accountNumber;
    private double _amount;
    private string _accountName;
    private string _message;
    private bool _loading;
    private bool _save;
    private string ErrorMessage { get; set; }

    private async Task SendMoneyAsync()
    {
        try
        {
            _loading = true;
            User user = CustomAuthenticationStateProvider.storedUser;
            Account sender = await _service.GetAccount(user.Username);
            
            Account receiver = await _service.GetAccount(_accountName, _accountNumber);

            Transaction transaction = new Transaction(sender, receiver, _amount, _message, DateTime.Now.ToString(), _save);
            string successMessage = await _transactionService.SendMoney(transaction);
            
            ErrorMessage = successMessage;
            _loading = false;
        }
        catch (Exception e)
        {
            _loading = false;
            ErrorMessage = e.Message;
        }
    }
}