@page "/Login"
@using BlazorClient.Authentication

@namespace BlazorClient.Pages

@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navMgr

<AuthorizeView>
    <NotAuthorized>
        <div class="card">
            <h4 class="card-header">Login</h4>
            <div class="card-body">
            <div class="form-group row">
                <label class="col-form-label">Username:</label>
                <input type="text" placeholder="username" @bind-value="_username"/>
            </div>
                <div class="form-group row">
                    <label class="col-form-label">Password:</label>
                    <input type="password" placeholder="password" @bind-value="_password"/>
                </div>
                <div style="color:red">@ErrorMessage</div>
                <button disabled="@_loading" class="btn btn-light">
                    @if (_loading) 
                    {
                       <span class="spinner-border spinner-border-sm mr-1"></span>
                   }
                   <a href="" @onclick="PerformLoginAsync">Login</a> 
                </button>
                
                <div> <label>Don't have an account?</label>
                    <button class="btn btn-light">
                        <a href="" @onclick="Signup"> Register here</a>
                    </button>
                    
                </div>
                </div>
        </div>
        
    </NotAuthorized>
   
    <Authorized>
        <a href="" @onclick="PerformLogoutAsync">
            Logout
        </a>
    </Authorized>
</AuthorizeView>

@code {
    private string _username;
    private string _password;
    private string ErrorMessage { get; set; }
    private bool _loading;

    public async Task PerformLoginAsync()
    {
       _loading = true;
        try
        {
            await ((CustomAuthenticationStateProvider) _authenticationStateProvider).ValidateLoginAsync(_username, _password);
            _username = "";
            _password = "";
            _navMgr.NavigateTo("/Customers");
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
            _loading = false;
            Console.WriteLine(ErrorMessage);
        }
        
    }

    public async Task PerformLogoutAsync()
    {
        ErrorMessage = "";
        _username = "";
        _password = "";
        try
        {
            ((CustomAuthenticationStateProvider) _authenticationStateProvider).Logout();
            _navMgr.NavigateTo("/Login");
        }
        catch (Exception e)
        {
        }
    }

    private void Signup()
    {
        _navMgr.NavigateTo("/Customers");
    }
}